<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>GoCaff</title>
  
  <subtitle>Go茶馆</subtitle>
  <link href="https://gocaff.cn/atom.xml" rel="self"/>
  
  <link href="https://gocaff.cn/"/>
  <updated>2024-11-08T03:02:29.157Z</updated>
  <id>https://gocaff.cn/</id>
  
  <author>
    <name>RUI</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>shell中 /dev/null 2&gt;&amp;1 是什么?</title>
    <link href="https://gocaff.cn/posts/dev-null-2-1.html"/>
    <id>https://gocaff.cn/posts/dev-null-2-1.html</id>
    <published>2019-04-26T02:50:43.000Z</published>
    <updated>2024-11-08T03:02:29.157Z</updated>
    
    <content type="html"><![CDATA[<h1 id="shell重定向介绍"><a href="#shell重定向介绍" class="headerlink" title="shell重定向介绍"></a>shell重定向介绍</h1><p>就像我们平时写的程序一样，一段程序会处理外部的输入，然后将运算结果输出到指定的位置。在交互式的程序中，输入来自用户的键盘和鼠标，结果输出到用户的屏幕，甚至播放设备中。而对于某些后台运行的程序，输入可能来自于外部的一些文件，运算的结果通常又写到其他的文件中。而且程序在运行的过程中，会有一些关键性的信息，比如异常堆栈，外部接口调用情况等，这些都会统统写到日志文件里。</p><p><code>shell</code> 脚本也一样，但是我们一般在使用 <code>shell</code> 命令的时候，更多地还是通过键盘输入，然后在屏幕上查看命令的执行结果。如果某些情况下，我们需要将 <code>shell</code> 命令的执行结果存储到文件中，那么我们就需要使用输入输出的重定向功能。</p><h1 id="文件描述符"><a href="#文件描述符" class="headerlink" title="文件描述符"></a>文件描述符</h1><p>当执行 <code>shell</code> 命令时，会默认打开3个文件，每个文件有对应的文件描述符来方便我们使用：</p><table><thead><tr><th>类型</th><th>文件描述</th><th>默认情况</th><th>对应文件句柄位置</th></tr></thead><tbody><tr><td>标准输入（standard input）</td><td>0</td><td>从键盘获得输入</td><td>&#x2F;proc&#x2F;self&#x2F;0</td></tr><tr><td>标准输出（standard output）</td><td>1</td><td>输出到屏幕（即控制台）</td><td>&#x2F;proc&#x2F;self&#x2F;1</td></tr><tr><td>错误输出（error output）</td><td>2</td><td>输出到屏幕（即控制台）</td><td>&#x2F;proc&#x2F;self&#x2F;2</td></tr></tbody></table><p>所以我们平时在执行 <code>shell</code> 命令中，都默认是从键盘获得输入，并且将结果输出到控制台上。但是我们可以通过更改文件描述符默认的指向，从而实现输入输出的重定向。比如我们将 <code>1</code> 指向文件，那么标准的输出就会输出到文件中。</p><h1 id="输出重定向"><a href="#输出重定向" class="headerlink" title="输出重定向"></a>输出重定向</h1><p>输出重定向的使用方式很简单，基本的一些命令如下：</p><table><thead><tr><th>命令</th><th>介绍</th></tr></thead><tbody><tr><td>command &gt;filename</td><td>把标准输出重定向到新文件中</td></tr><tr><td>command 1&gt;filename</td><td>同上</td></tr><tr><td>command &gt;&gt;filename</td><td>把标准输出追加到文件中</td></tr><tr><td>command 1&gt;&gt;filename</td><td>同上</td></tr><tr><td>command 2&gt;filename</td><td>把标准错误重定向到新文件中</td></tr><tr><td>command 2&gt;&gt;filename</td><td>把标准错误追加到新文件中</td></tr></tbody></table><p>我们使用&gt;或者&gt;&gt;对输出进行重定向。符号的左边表示文件描述符，如果没有的话表示1，也就是标准输出，符号的右边可以是一个文件，也可以是一个输出设备。当使用&gt;时，会判断右边的文件存不存在，如果存在的话就先删除，然后创建一个新的文件，不存在的话则直接创建。但是当使用&gt;&gt;进行追加时，则不会删除原来已经存在的文件。</p><p>为了更好地理解输出重定向，感受重定向的“魅力”，我们看一下以下的例子：我们创建一个测试目录，目录下面仅有一个 <code>a.txt</code> 文件。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">tree</span></span><br><span class="line">.</span><br><span class="line">└── a.txt</span><br><span class="line"></span><br><span class="line">0 directories, 1 file</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="built_in">ls</span> a.txt b.txt</span></span><br><span class="line">ls: 无法访问b.txt: 没有那个文件或目录</span><br><span class="line">a.txt</span><br></pre></td></tr></table></figure><p>在我们执行 <code>ls a.txt b.txt</code> 之后，一共有两种输出，其中 <code>ls</code>: 无法访问 <code>b.txt</code>: 没有那个文件或目录是错误输出，<code>a.txt</code>是标准输出。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="built_in">ls</span> a.txt b.txt 1&gt;out</span></span><br><span class="line">ls: 无法访问b.txt: 没有那个文件或目录</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="built_in">cat</span> out</span></span><br><span class="line">a.txt</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="built_in">ls</span> a.txt b.txt &gt;&gt;out</span></span><br><span class="line">ls: 无法访问b.txt: 没有那个文件或目录</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="built_in">cat</span> out</span></span><br><span class="line">a.txt</span><br><span class="line">a.txt</span><br></pre></td></tr></table></figure><p>在上述命令中，我们将原来的标准输出重定向到了 <code>out</code> 文件中，所以控制台只剩下了错误提示。并且当执行了追加操作时，<code>out</code> 文件的内容非但没有被清空，反而又多了一条 <code>a.txt</code>。</p><p>同理，我们也可以将错误输出重定向到文件中：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="built_in">ls</span> a.txt b.txt 2&gt;err</span></span><br><span class="line">a.txt</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="built_in">cat</span> err</span></span><br><span class="line">ls: 无法访问b.txt: 没有那个文件或目录</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="built_in">ls</span> a.txt b.txt &gt;out 2&gt;err</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="built_in">cat</span> out</span></span><br><span class="line">a.txt</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="built_in">cat</span> err</span></span><br><span class="line">ls: 无法访问b.txt: 没有那个文件或目录</span><br></pre></td></tr></table></figure><p>看到这里，朋友们可能会发现 <code>&gt;out 2&gt;err</code> 和我们在一开头提到的 <code>&gt;/dev/null 2&gt;&amp;1</code> 已经很像了，别急，这待会再说。</p><h1 id="输入重定向"><a href="#输入重定向" class="headerlink" title="输入重定向"></a>输入重定向</h1><p>在理解了输出重定向之后，理解输入重定向就会容易得多。对输入重定向的基本命令如下：</p><table><thead><tr><th>命令</th><th>介绍</th></tr></thead><tbody><tr><td>command &lt;filename</td><td>以filename文件作为标准输入</td></tr><tr><td>command 0&lt;filename</td><td>同上</td></tr><tr><td>command &lt;&lt;delimiter</td><td>从标准输入中读入，直到遇到delimiter分隔符</td></tr></tbody></table><p>我们使用&lt;对输入做重定向，如果符号左边没有写值，那么默认就是0。</p><p>我们这次以 <code>cat</code> 命令为例，如果 <code>cat</code> 后面没有跟文件名的话，那它的作用就是将标准输入（比如键盘）回显到标准输出（比如屏幕）上：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="built_in">cat</span></span></span><br><span class="line">123</span><br><span class="line">123</span><br><span class="line">test</span><br><span class="line">test</span><br></pre></td></tr></table></figure><p>我们可以将利用输入重定向，将我们在键盘上敲入的字符写入到文件中。我们需要使用 <code>ctrl+c</code> 来结束输入：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="built_in">cat</span> &gt;out</span></span><br><span class="line">123</span><br><span class="line">test</span><br><span class="line">^C</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="built_in">cat</span> out</span></span><br><span class="line">123</span><br><span class="line">test</span><br></pre></td></tr></table></figure><p>好了，此时我们觉得自己在键盘上敲比较累，还是直接让 <code>cat</code> 读取一个文件吧。那么我们需要利用输入重定向：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="built_in">cat</span> input</span></span><br><span class="line">aaa</span><br><span class="line">111</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="built_in">cat</span> &gt;out &lt;input</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="built_in">cat</span> out</span></span><br><span class="line">aaa</span><br><span class="line">111</span><br></pre></td></tr></table></figure><p>神奇的事情发生了，<code>out</code> 文件里面的内容被替换成了 <code>input</code> 文件里的内容。那么 <code>&lt;&lt;</code> 又是什么作用呢？我们再看：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="built_in">cat</span> &gt;out &lt;&lt;<span class="string">end</span></span></span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash"><span class="string">123</span></span></span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash"><span class="string">test</span></span></span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash"><span class="string">end</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="built_in">cat</span> out</span></span><br><span class="line">123</span><br><span class="line">test</span><br></pre></td></tr></table></figure><p>我们看到，当我们输入完 <code>cat &gt;out &lt;&lt;end</code>，然后敲下回车之后，命令并没有结束，此时 <code>cat</code> 命令像一开始一样，等待你给它输入数据。然后当我们敲入 <code>end</code> 之后，<code>cat</code> 命令就结束了。<code>end</code> 之前输入的字符都已经被写入到了 <code>out</code> 文件中。这就是输入分割符的作用。</p><h1 id="高级用法"><a href="#高级用法" class="headerlink" title="高级用法"></a>高级用法</h1><h2 id="重定向绑定"><a href="#重定向绑定" class="headerlink" title="重定向绑定"></a>重定向绑定</h2><p>好了，在有了以上知识的基础上，我们再来看开头提到的 <code>&gt;/dev/null 2&gt;&amp;1</code> 。这条命令其实分为两命令，一个是 <code>&gt;/dev/null</code>，另一个是 <code>2&gt;&amp;1</code> 。</p><h3 id="dev-null"><a href="#dev-null" class="headerlink" title="&gt;&#x2F;dev&#x2F;null"></a>&gt;&#x2F;dev&#x2F;null</h3><p>这条命令的作用是将标准输出1重定向到 <code>/dev/null</code> 中。<code>/dev/null</code> 代表 <code>linux</code> 的空设备文件，所有往这个文件里面写入的内容都会丢失，俗称“黑洞”。那么执行了 <code>&gt;/dev/null</code> 之后，标准输出就会不再存在，没有任何地方能够找到输出的内容。</p><h3 id="2-1"><a href="#2-1" class="headerlink" title="2&gt;&amp;1"></a>2&gt;&amp;1</h3><p>这条命令用到了重定向绑定，采用&amp;可以将两个输出绑定在一起。这条命令的作用是错误输出将和标准输出同用一个文件描述符，说人话就是错误输出将会和标准输出输出到同一个地方。</p><p><code>linux</code> 在执行 <code>shell</code> 命令之前，就会确定好所有的输入输出位置，并且从左到右依次执行重定向的命令，所以 <code>&gt;/dev/null 2&gt;&amp;1</code> 的作用就是让标准输出重定向到 <code>/dev/null</code> 中（丢弃标准输出），然后错误输出由于重用了标准输出的描述符，所以错误输出也被定向到了 <code>/dev/null</code> 中，错误输出同样也被丢弃了。执行了这条命令之后，该条 <code>shell</code> 命令将不会输出任何信息到控制台，也不会有任何信息输出到文件中。</p><h2 id="dev-null-2-1-VS-2-1-dev-null"><a href="#dev-null-2-1-VS-2-1-dev-null" class="headerlink" title="&gt;&#x2F;dev&#x2F;null 2&gt;&amp;1 VS 2&gt;&amp;1 &gt;&#x2F;dev&#x2F;null"></a>&gt;&#x2F;dev&#x2F;null 2&gt;&amp;1 VS 2&gt;&amp;1 &gt;&#x2F;dev&#x2F;null</h2><p>再回到文章的开头，我说我弄反了 <code>&gt;/dev/null</code> 和 <code>2&gt;&amp;1</code> 拼装的顺序，导致出了一点小问题。乍眼看这两条命令貌似是等同的，但其实大为不同。刚才提到了，<code>linux</code> 在执行 <code>shell</code> 命令之前，就会确定好所有的输入输出位置，并且从左到右依次执行重定向的命令。那么我们同样从左到右地来分析 <code>2&gt;&amp;1 &gt;/dev/null</code>：</p><p><code>2&gt;&amp;1</code>，将错误输出绑定到标准输出上。由于此时的标准输出是默认值，也就是输出到屏幕，所以错误输出会输出到屏幕。<br><code>&gt;/dev/null</code>，将标准输出 <code>1</code> 重定向到 <code>/dev/null</code> 中。</p><p>我们用一个表格来更好地说明这两条命令的区别：</p><table><thead><tr><th>命令</th><th>标准输出</th><th>错误输出</th></tr></thead><tbody><tr><td>&gt;&#x2F;dev&#x2F;null 2&gt;&amp;1</td><td>丢弃</td><td>丢弃</td></tr><tr><td>2&gt;&amp;1 &gt;&#x2F;dev&#x2F;null</td><td>丢弃</td><td>屏幕</td></tr></tbody></table><h2 id="dev-null-2-1-VS-dev-null-2-dev-null"><a href="#dev-null-2-1-VS-dev-null-2-dev-null" class="headerlink" title="&gt;&#x2F;dev&#x2F;null 2&gt;&amp;1 VS &gt;&#x2F;dev&#x2F;null 2&gt;&#x2F;dev&#x2F;null"></a>&gt;&#x2F;dev&#x2F;null 2&gt;&amp;1 VS &gt;&#x2F;dev&#x2F;null 2&gt;&#x2F;dev&#x2F;null</h2><p>那么可能会有些同学会疑问，为什么要用重定向绑定，而不是像 <code>&gt;/dev/null 2&gt;/dev/null</code> 这样子重复一遍呢。</p><p>为了回答这个问题，我们回到刚才介绍输出重定向的场景。我们尝试将标准输出和错误输出都定向到 <code>out</code> 文件中：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="built_in">ls</span> a.txt b.txt &gt;out 2&gt;out</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="built_in">cat</span> out</span></span><br><span class="line">a.txt</span><br><span class="line">�法访问b.txt: 没有那个文件或目录</span><br></pre></td></tr></table></figure><p><code>WTF</code> ？竟然出现了乱码，这是为啥呢？这是因为采用这种写法，标准输出和错误输出会抢占往out文件的管道，所以可能会导致输出内容的时候出现缺失、覆盖等情况。现在是出现了乱码，有时候也有可能出现只有 <code>error</code> 信息或者只有正常信息的情况。不管怎么说，采用这种写法，最后的情况是无法预估的。</p><p>而且，由于 <code>out</code> 文件被打开了两次，两个文件描述符会抢占性的往文件中输出内容，所以整体 <code>IO</code> 效率不如 <code>&gt;/dev/null 2&gt;&amp;1</code> 来得高。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>本文主要介绍了 <code>linux</code> 重定向的原理以及一些基本命令，并且详细地分析了 <code>&gt;/dev/null 2&gt;&amp;1</code> 这个命令以及一些注意点。</p><p>总而言之，在工作中用到最多的就是 <code>nohup command &gt;/dev/null 2&gt;&amp;1</code> 命令，希望大家能够好好掌握。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;shell重定向介绍&quot;&gt;&lt;a href=&quot;#shell重定向介绍&quot; class=&quot;headerlink&quot; title=&quot;shell重定向介绍&quot;&gt;&lt;/a&gt;shell重定向介绍&lt;/h1&gt;&lt;p&gt;就像我们平时写的程序一样，一段程序会处理外部的输入，然后将运算结果输出到指定</summary>
      
    
    
    
    <category term="liunx" scheme="https://gocaff.cn/categories/liunx/"/>
    
    
    <category term="shell" scheme="https://gocaff.cn/tags/shell/"/>
    
    <category term="liunx" scheme="https://gocaff.cn/tags/liunx/"/>
    
  </entry>
  
</feed>
